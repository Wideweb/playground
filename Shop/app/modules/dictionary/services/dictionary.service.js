/**********************************************************************************************
 * Search Model
**********************************************************************************************/
class Model {

    /******************************************************************************************
     Initialization
     ******************************************************************************************/
    constructor(
        /* Object */ data
    ) {
        this.id = data.id;
        this.term = data.term;
        this.translation = data.translation;
    }

    /******************************************************************************************
     * serialization
     ******************************************************************************************/
    serialize() {
        return {
            id: this.id,
            term: this.term,
            translation: this.translation
        }
    }
}

/**********************************************************************************************
 * Controller
 **********************************************************************************************/
const Controller = {
    list: [],
    map: {},

    /******************************************************************************************
     * METHODS
     ******************************************************************************************
     * registration of a new instance
     ******************************************************************************************/
    register: (list = []) => {
        list.forEach(data => {
            let item = new Model(data);
            Controller.list.push(item);
            Controller.map[item.id] = item;
        });

        return Controller.list;
    },

    /******************************************************************************************
     Clean up registered instances
     ******************************************************************************************/
    clear: () => {
        Controller.list = [];
        Controller.map = {};
    },

    /******************************************************************************************
     Set an instance to be current (by ID) -> or nothing
     ******************************************************************************************/
    setCurrent: (
        /* String? */ id
    ) => {
        Controller.current = Controller.map[id];
        return Controller.current;
    },

};

/**********************************************************************************************
 * Access Provider
 **********************************************************************************************/
export default class {
    static get $inject() {
        return [
            'httpProxyService',
        ];
    }

    /******************************************************************************************
     * Initialization
     ******************************************************************************************/
    constructor(
        proxy
    ) {
        this.proxy = proxy;
    }

    /******************************************************************************************
     References to private resources
     ******************************************************************************************
     * registered instances reference
     ******************************************************************************************/
    get list() {
        return Controller.list;
    }

    /******************************************************************************************
     * registered instances reference
     ******************************************************************************************/
    get map() {
        return Controller.map;
    }

    /******************************************************************************************
     Public Methods
     ******************************************************************************************
     Load user dictionary
     ******************************************************************************************/
    load() {
        return this.proxy
            .call('GetDictionary')
            .then((data) => {
                Controller.clear();
                Controller.register(data);
            });
    }

    /******************************************************************************************
     * Save dictionary term
     ******************************************************************************************/
    save(
        /* string */ term,
        /* string */ translation
    ) {
        return this.proxy
            .call('SaveDictionaryItem', {}, { term, translation })
            .then(() => this.load());
    }

    /******************************************************************************************
     * Remove dictionary term
     ******************************************************************************************/
    remove(
        /* int */ id
    ) {
        return this.proxy
            .call('RemoveDictionaryItem', { id })
            .then(() => this.load());
    }
}